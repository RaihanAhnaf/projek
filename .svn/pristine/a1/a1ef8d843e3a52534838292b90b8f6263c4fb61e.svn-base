package controllers

import (
	"eaciit/proactive-inv/helpers"
	"os"
	"strconv"
	"time"

	db "github.com/eaciit/dbox"
	knot "github.com/eaciit/knot/knot.v1"
	tk "github.com/eaciit/toolkit"
	"github.com/jung-kurt/gofpdf"
)

func (c *ReportController) GetDataGeneralLedger(k *knot.WebContext) interface{} {
	k.Config.OutputType = knot.OutputJson
	p := struct {
		Type       string
		DateStart  string
		DateEnd    string
		Filter     bool
		TextSearch string
	}{}
	e := k.GetPayload(&p)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}

	var pipes []tk.M
	dateStart, _ := time.Parse("2006-01-02", p.DateStart)
	End, _ := time.Parse("2006-01-02", p.DateEnd)
	dateEnd := End.AddDate(0, 0, 1)

	if p.Type == "" {
		pipes = append(pipes, tk.M{"$match": tk.M{"PostingDate": tk.M{"$gte": dateStart, "$lt": dateEnd}, "Journal_Type": tk.M{"$ne": p.Type}}})
	} else if p.Type == "All" {
		pipes = append(pipes, tk.M{"$match": tk.M{"PostingDate": tk.M{"$gte": dateStart, "$lt": dateEnd}, "Journal_Type": tk.M{"$ne": p.Type}}})

	} else {
		pipes = append(pipes, tk.M{"$match": tk.M{"PostingDate": tk.M{"$gte": dateStart, "$lt": dateEnd}, "Journal_Type": tk.M{"$eq": p.Type}}})

	}
	pipes = append(pipes, tk.M{"$unwind": "$ListDetail"})
	pipes = append(pipes, tk.M{"$project": tk.M{
		"_id":            "$ListDetail._id",
		"No":             "$ListDetail.No",
		"IdJournal":      "$IdJournal",
		"Journal_Type":   "$ListDetail.Journal_Type",
		"PostingDate":    "$ListDetail.PostingDate",
		"DateStr":        "$ListDetail.DateStr",
		"DocumentNumber": "$ListDetail.DocumentNumber",
		"Acc_Code":       "$ListDetail.Acc_Code",
		"Acc_Name":       "$ListDetail.Acc_Name",
		"Debet":          "$ListDetail.Debet",
		"Credit":         "$ListDetail.Credit",
		"Description":    "$ListDetail.Description",
		"Department":     "$ListDetail.Department",
		"SalesCode":     "$ListDetail.SalesCode",
		"SalesName":     "$ListDetail.SalesName",
		"Attachment":     "$ListDetail.Attachment",
		"User":           "$ListDetail.User",
	}})

	filter := []*db.Filter{}
	filter = append(filter, db.Contains("ListDetail.Acc_Name", p.TextSearch))
	filter = append(filter, db.Contains("ListDetail.Description", p.TextSearch))
	mainFilter := new(db.Filter)
	mainFilter = db.Or(filter...)
	// csr, e := c.Ctx.Connection.NewQuery().From("GeneralLedger").Where(mainFilter).Cursor(nil)
	// if e != nil {
	// 	return c.SetResultInfo(true, e.Error(), nil)
	// }
	csr, e := c.Ctx.Connection.NewQuery().Command("pipe", pipes).From("GeneralLedger").Where(mainFilter).Cursor(nil)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}
	defer csr.Close()
	results := make([]tk.M, 0)
	e = csr.Fetch(&results, 0, false)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}
	if p.Filter && len(results) == 0 {
		return c.SetResultInfo(true, "Please refine your search", nil)
	}
	return c.SetResultInfo(false, "Success", results)
}
func (c *ReportController) ExportPdfGeneralLedger(k *knot.WebContext) interface{} {
	k.Config.OutputType = knot.OutputJson
	p := struct {
		Filter    bool
		DateStart time.Time
		DateEnd   time.Time
		Data      []tk.M
	}{}
	e := k.GetPayload(&p)
	if e != nil {
		return c.SetResultFile(true, e.Error(), "")
	}
	corp, e := helpers.GetDataCorporateJson()
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}
	DATA := p.Data
	pdf := gofpdf.New("L", "mm", "A4", c.FontPath)
	pdf.AddFont("Century_Gothic", "", "Century_Gothic.json")
	pdf.AddFont("Century_Gothicb", "B", "Century_Gothicb.json")
	pdf.AddPage()
	pdf.SetXY(10, 5)
	pdf.SetFont("Century_Gothic", "", 12)
	// pdf.Image(c.LogoFile+"eaciit-logo.png", 12, 10, 17, 17, false, "", 0, "")
	pdf.Ln(2)
	y1 := pdf.GetY()
	pdf.SetY(y1 + 4)
	pdf.SetX(11.5)
	pdf.CellFormat(0, 12, corp.Name, "", 0, "L", false, 0, "")
	pdf.SetY(y1 + 10)
	pdf.SetX(11.5)
	pdf.SetFont("Century_Gothic", "", 11)
	pdf.CellFormat(0, 15, corp.Address, "", 0, "L", false, 0, "")
	pdf.SetX(180)
	pdf.SetFont("Century_Gothicb", "B", 16)
	pdf.CellFormat(0, 15, "GENERAL LEDGER", "", 0, "L", false, 0, "")

	pdf.SetY(y1 + 17)
	pdf.SetX(11.5)
	pdf.SetFont("Century_Gothic", "", 11)
	pdf.CellFormat(0, 12, corp.City+"-"+corp.Country, "", 0, "L", false, 0, "")
	pdf.SetX(11.5)
	// pdf.Ln(1)

	pdf.SetY(y1 + 23)
	pdf.SetX(11.5)
	pdf.SetFont("Century_Gothic", "", 11)
	pdf.CellFormat(0, 12, corp.NoTelp, "", 0, "L", false, 0, "")
	pdf.SetX(6)

	y2 := pdf.GetY()
	pdf.SetY(y2 + 2)

	pdf.Line(pdf.GetX()+3, pdf.GetY()+9, 280, pdf.GetY()+9)
	pdf.SetFont("Century_Gothic", "", 6)
	pdf.Ln(8)
	pdf.GetY()
	pdf.SetX(12)
	// if p.Filter == true {
	pdf.CellFormat(10, 10, "Date Periode : ", "", 0, "L", false, 0, "")
	pdf.CellFormat(8, 10, "", "", 0, "L", false, 0, "")
	pdf.CellFormat(80, 10, p.DateStart.Format("02 January 2006")+" - "+p.DateEnd.Format("02 January 2006"), "", 0, "L", false, 0, "")
	pdf.Ln(4)
	// }
	pdf.GetY()
	pdf.SetX(12.0)
	pdf.CellFormat(10, 10, "Date Created : ", "", 0, "L", false, 0, "")
	pdf.CellFormat(8, 10, "", "", 0, "L", false, 0, "")
	pdf.CellFormat(80, 10, time.Now().Format("02 January 2006"), "", 0, "L", false, 0, "")
	pdf.Ln(8)
	coaHead := []string{"No. ", "Date", "Document Number", "Account", "Account Name", "Department", "Sales", "Description", "Reff", "Debit", "Credit"}
	widthHead := []float64{8, 20.0, 25.0, 15.0, 40.0, 25.0, 25.0, 35.0, 25.0, 25.0, 25.0}
	y0 := pdf.GetY()
	for i, head := range coaHead {
		pdf.SetY(y0)
		x := 12.0
		for y, z := range widthHead {
			if i > y {
				x += z
			} else {
				x += 0.0
			}
		}
		pdf.SetX(x)
		if i == 0 {
			pdf.MultiCell(widthHead[i], 5, head, "1", "C", false)
		} else {
			pdf.MultiCell(widthHead[i], 5, head, "1", "C", false)
		}

	}
	y0 = pdf.GetY()
	pdf.SetY(pdf.GetY())
	totalDebet := 0.0
	totalCredit := 0.0
	lastbigest := 0.0
	var length = len(DATA) + 1
	for i, each := range DATA {
		y1 = pdf.GetY()
		pdf.SetY(y1)
		x := 12.0
		pdf.SetX(x)
		pdf.MultiCell(widthHead[0], 5, strconv.Itoa(i+1), "", "C", false)
		a0 := pdf.GetY()
		x += widthHead[0]
		pdf.SetXY(x, y1)
		pdf.MultiCell(widthHead[1], 5, each.GetString("DateStr"), "", "L", false)
		a1 := pdf.GetY()
		x += widthHead[1]
		pdf.SetXY(x, y1)
		pdf.MultiCell(widthHead[2], 5, each.GetString("DocumentNumber"), "", "L", false)
		a2 := pdf.GetY()
		x += widthHead[2]
		pdf.SetXY(x, y1)
		pdf.MultiCell(widthHead[3], 5, strconv.Itoa(each.GetInt("Acc_Code")), "", "L", false)
		a3 := pdf.GetY()
		x += widthHead[3]
		pdf.SetXY(x, y1)
		pdf.MultiCell(widthHead[4], 5, each.GetString("Acc_Name"), "", "L", false)
		a4 := pdf.GetY()
		x += widthHead[4]
		pdf.SetXY(x, y1)
		pdf.MultiCell(widthHead[5], 5, each.GetString("Department"), "", "L", false)
		a5 := pdf.GetY()
		x += widthHead[5]
		pdf.SetXY(x, y1)
		pdf.MultiCell(widthHead[6], 5, each.GetString("SalesName"), "", "L", false)
		a6 := pdf.GetY()
		x += widthHead[6]
		pdf.SetXY(x, y1)
		pdf.MultiCell(widthHead[7], 5, each.GetString("Description"), "", "L", false)
		a7 := pdf.GetY()
		x += widthHead[7]
		pdf.SetXY(x, y1)
		pdf.MultiCell(widthHead[8], 5, each.GetString("IdJournal"), "", "L", false)
		a8 := pdf.GetY()
		x += widthHead[8]
		pdf.SetXY(x, y1)
		totalDebet = totalDebet + each.GetFloat64("Debet")
		Debet := tk.Sprintf("%.2f", each.GetFloat64("Debet"))
		Debet = c.ConvertToCurrency(Debet)
		if each.GetFloat64("Debet") < 0 {
			Debet = "(" + tk.Sprintf("%.2f", each.GetFloat64("Debet")*-1) + ")"
			Debet = c.ConvertToCurrency(Debet)
		}
		pdf.MultiCell(widthHead[9], 5, Debet, "R", "R", false)
		a9 := pdf.GetY()
		x += widthHead[9]
		pdf.SetXY(x, y1)
		totalCredit = totalCredit + each.GetFloat64("Credit")
		Credit := tk.Sprintf("%.2f", each.GetFloat64("Credit"))
		Credit = c.ConvertToCurrency(Credit)
		if each.GetFloat64("Credit") < 0 {
			Credit = "(" + tk.Sprintf("%.2f", each.GetFloat64("Credit")*-1) + ")"
			Credit = c.ConvertToCurrency(Credit)
		}
		pdf.MultiCell(widthHead[10], 5, Credit, "", "R", false)
		allA := []float64{a0, a1, a2, a3, a4, a5, a6, a7, a8, a9}
		var n, biggest float64
		for _, v := range allA {
			if v > n {
				n = v
				biggest = n
			}
		}
		pdf.SetY(biggest)
		if biggest >= 177.0 {
			// pdf.Line(12.0, biggest, x+widthHead[9], biggest)
			if y0 != 10.00125 {
				pdf.Line(12.0, y0, 12.0, biggest)
				pdf.Line(x+widthHead[10], y0, x+widthHead[10], biggest)
				pdf.Line(12.0+widthHead[0], y0, 12.0+widthHead[0], biggest)
				pdf.Line(12.0+widthHead[0]+widthHead[1], y0, 12.0+widthHead[0]+widthHead[1], biggest)
				pdf.Line(12.0+widthHead[0]+widthHead[1]+widthHead[2], y0, 12.0+widthHead[0]+widthHead[1]+widthHead[2], biggest)
				pdf.Line(12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3], y0, 12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3], biggest)
				pdf.Line(12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4], y0, 12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4], biggest)
				pdf.Line(12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5], y0, 12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5], biggest)
				pdf.Line(12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6], y0, 12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6], biggest)
				pdf.Line(12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6]+widthHead[7], y0, 12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6]+widthHead[7], biggest)
				pdf.Line(12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6]+widthHead[7]+widthHead[8], y0, 12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6]+widthHead[7]+widthHead[8], biggest) // vertical last
				pdf.Line(12.0, biggest, x+widthHead[9], biggest)
			}
			pdf.AddPage()
			y0 = pdf.GetY()
			if y0 == 10.00125 && i != length {
				pdf.Line(12.0, y0, 12.0, biggest+5) // vertical
				pdf.Line(12.0, y0, x+widthHead[9], y0)
				pdf.Line(x+widthHead[9], y0, x+widthHead[9], biggest+5)
				pdf.Line(12.0+widthHead[0], y0, 12.0+widthHead[0], biggest+5)
				pdf.Line(12.0+widthHead[0]+widthHead[1], y0, 12.0+widthHead[0]+widthHead[1], biggest+5)
				pdf.Line(12.0+widthHead[0]+widthHead[1]+widthHead[2], y0, 12.0+widthHead[0]+widthHead[1]+widthHead[2], biggest+5)
				pdf.Line(12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3], y0, 12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3], biggest+5)
				pdf.Line(12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4], y0, 12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4], biggest+5)
				pdf.Line(12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5], y0, 12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5], biggest+5)
				pdf.Line(12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6], y0, 12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6], biggest+5)
				pdf.Line(12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6]+widthHead[7], y0, 12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6]+widthHead[7], biggest+5)
				pdf.Line(12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6]+widthHead[7]+widthHead[8], y0, 12.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6]+widthHead[7]+widthHead[8], biggest+5) // vertical last
				pdf.Line(12.0, biggest+5, x+widthHead[9], biggest+5)
				lastbigest = biggest + 5
			}
		}
	}
	pdf.SetFont("Century_Gothic", "", 9)
	y2 = pdf.GetY()
	// pdf.LinearGradient(x, y, w, h, r1, g1, b1, r2, g2, b2, x1, y1, x2, y2)
	pdf.LinearGradient(11.0, y2+0.2, 280, lastbigest, 255, 255, 255, 255, 255, 255, 12.0, y2, 12.0, lastbigest) //DELETE MORE LINE
	pdf.SetY(pdf.GetY())
	// pdf.Line(12.0, pdf.GetY(), 282.0, pdf.GetY())
	pdf.SetX(12.0)
	pdf.MultiCell(218, 5, "Total", "1", "C", false)
	Debet := tk.Sprintf("%.2f", totalDebet)
	Debet = c.ConvertToCurrency(Debet)
	if totalDebet < 0 {
		Debet = "(" + tk.Sprintf("%.2f", totalDebet*-1) + ")"
		Debet = c.ConvertToCurrency(Debet)
	}
	pdf.SetY(y2)
	pdf.SetX(218.0 + 12.0)
	pdf.MultiCell(25.0, 5, Debet, "TRB", "R", false)

	Credit := tk.Sprintf("%.2f", totalCredit)
	Credit = c.ConvertToCurrency(Credit)
	if totalCredit < 0 {
		Credit = "(" + tk.Sprintf("%.2f", totalCredit*-1) + ")"
		Credit = c.ConvertToCurrency(Credit)
	}
	pdf.SetY(y2)
	pdf.SetX(243.0 + 12.0)
	pdf.MultiCell(25.0, 5, Credit, "TRB", "R", false)

	e = os.RemoveAll(c.PdfPath + "/report/pdf")
	if e != nil {
		return c.SetResultInfo(true, e.Error(), "")
	}
	e = os.MkdirAll(c.PdfPath+"/report/pdf", 0777)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), "")
	}
	namepdf := "-GL.pdf"
	FixName := time.Now().Format("2006-01-02T150405") + namepdf
	fileName := FixName
	location := c.PdfPath + "/report/pdf"
	e = pdf.OutputFileAndClose(location + "/" + fileName)
	if e != nil {
		return c.SetResultFile(true, e.Error(), "")
	}
	return c.SetResultFile(false, "success", fileName)
}
