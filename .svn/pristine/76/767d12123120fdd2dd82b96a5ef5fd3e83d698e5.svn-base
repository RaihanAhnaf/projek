package controllers

import (
	"eaciit/proactive-inv/helpers"
	. "eaciit/proactive-inv/models"
	"io"
	"path/filepath"
	"strings"

	. "eaciit/proactive-inv/helpers"
	"os"
	"strconv"
	"time"

	"github.com/eaciit/dbox"
	knot "github.com/eaciit/knot/knot.v1"
	tk "github.com/eaciit/toolkit"
	"github.com/jung-kurt/gofpdf"
	"gopkg.in/mgo.v2/bson"
)

func (c *TransactionController) PurchasePayment(k *knot.WebContext) interface{} {
	access := c.LoadBase(k)
	if access == nil {
		return nil
	}

	k.Config.NoLog = true
	k.Config.OutputType = knot.OutputTemplate
	k.Config.IncludeFiles = []string{"_loader2.html", "_head.html"}

	DataAccess := c.GetDataAccess(access)
	return DataAccess
}

func (c *TransactionController) GetDataPurchasePayment(k *knot.WebContext) interface{} {
	k.Config.OutputType = knot.OutputJson
	p := struct {
		DateStart    string
		DateEnd      string
		IsInventory  bool
		SupplierCode string
		Filter       bool
	}{}
	e := k.GetPayload(&p)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}

	var pipes []tk.M
	dateStart, _ := time.Parse("2006-01-02", p.DateStart)
	End, _ := time.Parse("2006-01-02", p.DateEnd)
	dateEnd := End.AddDate(0, 0, 1)

	pipes = append(pipes, tk.M{"$match": tk.M{"DatePosting": tk.M{"$gte": dateStart, "$lt": dateEnd}}})
	pipes = append(pipes, tk.M{"$match": tk.M{"IsInventory": p.IsInventory}})

	if p.Filter == true {
		if p.SupplierCode != "" {
			pipes = append(pipes, tk.M{"$match": tk.M{"SupplierCode": p.SupplierCode}})
		}
	}

	csr, e := c.Ctx.Connection.NewQuery().Command("pipe", pipes).From("PurchasePayment").Cursor(nil)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}
	defer csr.Close()

	results := make([]tk.M, 0)
	e = csr.Fetch(&results, 0, false)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}

	return c.SetResultInfo(false, "Success", results)
}

func (c *TransactionController) GetDataPOForPP(k *knot.WebContext) interface{} {
	k.Config.OutputType = knot.OutputJson
	p := struct {
		DateStart string
		DateEnd   string
	}{}
	e := k.GetPayload(&p)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}

	var pipes []tk.M
	dateStart, _ := time.Parse("2006-01-02", p.DateStart)
	End, _ := time.Parse("2006-01-02", p.DateEnd)
	dateEnd := End.AddDate(0, 0, 1)

	pipes = append(pipes, tk.M{"$match": tk.M{"DatePosting": tk.M{"$gte": dateStart, "$lt": dateEnd}}})
	pipes = append(pipes, tk.M{"$match": tk.M{"Status": "PI"}})

	csr, e := c.Ctx.Connection.NewQuery().Command("pipe", pipes).From("PurchaseOrder").Cursor(nil)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}
	defer csr.Close()

	results := make([]tk.M, 0)
	e = csr.Fetch(&results, 0, false)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}

	return c.SetResultInfo(false, "Success", results)
}
func (c *TransactionController) GetAllDataPurchasePayment(k *knot.WebContext) interface{} {
	k.Config.OutputType = knot.OutputJson
	p := struct {
		DateStart    time.Time
		DateEnd      time.Time
		SupplierCode string
		TextSearch   string
		Filter       bool
	}{}
	e := k.GetPayload(&p)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}
	dateStart, _ := time.Parse("2006-01-02", p.DateStart.Format("2006-01-02"))
	dateEnd, _ := time.Parse("2006-01-02", p.DateEnd.Format("2006-01-02"))
	dateEnd = dateEnd.AddDate(0, 0, 1)
	filter := []*dbox.Filter{}
	// filter = append(filter, dbox.Eq("Status", "PI"))
	if p.Filter == true {
		filter = append(filter, dbox.Gte("DatePosting", dateStart))
		filter = append(filter, dbox.Lt("DatePosting", dateEnd))
		if p.TextSearch != "" {
			// filter = append(filter, dbox.Contains("DocumentNumber", p.TextSearch))
			filter = append(filter, dbox.Or(dbox.Contains("DocumentNumber", p.TextSearch), dbox.Contains("SupplierName", p.TextSearch)))
		}
		if p.SupplierCode != "" {
			filter = append(filter, dbox.Eq("SupplierCode", p.SupplierCode))
		}
	} else {
		filter = append(filter, dbox.Gte("DatePosting", dateStart))
		filter = append(filter, dbox.Lt("DatePosting", dateEnd))
	}
	query := tk.M{}.Set("where", dbox.And(filter...))
	csr, e := c.Ctx.Find(new(PurchasePaymentModel), query)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}
	defer csr.Close()

	results := make([]tk.M, 0)
	e = csr.Fetch(&results, 0, false)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}

	if p.Filter && len(results) == 0 {
		return c.SetResultInfo(true, "Please refine your search", nil)
	}

	return c.SetResultInfo(false, "Success", results)
}
func (c *TransactionController) GetDataPaymentAccount(k *knot.WebContext) interface{} {
	k.Config.OutputType = knot.OutputJson
	csr, e := c.Ctx.Connection.NewQuery().Select().From(NewCoaModel().TableName()).Where(dbox.Eq("main_acc_code", 1100)).Cursor(nil)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}
	defer csr.Close()

	results := []CoaModel{}
	e = csr.Fetch(&results, 0, false)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}
	return c.SetResultInfo(false, "Success", results)
}
func (c *TransactionController) SavePurchasePayment(k *knot.WebContext) interface{} {
	k.Config.OutputType = knot.OutputJson
	e := k.Request.ParseMultipartForm(1000000000)
	if e != nil {
		c.ErrorResultInfo(e.Error(), nil)
	}
	payload := new(tk.M)
	_, formData, err := k.GetPayloadMultipart(payload)
	if err != nil {
		return c.ErrorResultInfo(err.Error(), nil)
	}
	data := PurchasePaymentModel{}
	tk.UnjsonFromString(formData["data"][0], &data)

	department := formData["department"][0]
	typepurchase := formData["typepurchase"][0]
	// tk.Println("TYPE===>", typepurchase)
	m := data.DatePosting.UTC().Month()
	y := data.DatePosting.UTC().Year()
	folder := tk.Sprintf("%d%02d", y, m)
	//Create Directory
	baseImagePath := ReadConfig()["uploadpath"]
	pathfolder := filepath.Join(baseImagePath, folder)
	if _, err = os.Stat(pathfolder); os.IsNotExist(err) {
		os.MkdirAll(pathfolder, 0777)
	}
	file, handler, err := k.Request.FormFile("fileUpload")
	if err != nil {
		return c.ErrorResultInfo(err.Error(), nil)
	}
	defer file.Close()
	fileName := "pp-" + tk.RandomString(6) + filepath.Ext(handler.Filename)
	filePath := filepath.Join(pathfolder, fileName)
	f, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, 0666)
	if err != nil {
		return c.ErrorResultInfo(err.Error(), nil)
	}
	defer f.Close()
	_, err = io.Copy(f, file)
	if err != nil {
		return c.ErrorResultInfo(err.Error(), nil)
	}
	p := data
	// m := p.DatePosting.UTC().Month()
	// y := p.DatePosting.UTC().Year()
	crs, e := c.Ctx.Connection.NewQuery().From("SequencePP").Select().Where(dbox.And(dbox.Eq("collname", "purchasepayment"),
		dbox.Eq("year", y))).Cursor(nil)

	defer crs.Close()
	result := []SequencePPModel{}
	e = crs.Fetch(&result, 0, false)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}
	secPP := 0
	if len(result) == 0 {
		mod := NewSequencePPModel()
		mod.Collname = "purchasepayment"
		mod.TypePo = "purchasepayment"
		mod.Lastnumber = 1
		mod.Month = 0
		mod.Year = y
		e = c.Ctx.Save(mod)
		secPP = 1
	} else {
		sec := result[0]
		sec.Lastnumber = sec.Lastnumber + 1
		// c.Ctx.Save(&sec)
		secPP = sec.Lastnumber
	}
	strNum := ""
	if secPP < 10 {
		strNum = "000"
	} else if secPP >= 10 && secPP < 100 {
		strNum = "00"
	} else if secPP >= 100 && secPP < 1000 {
		strNum = "0"
	}
	model := NewPurchasePaymentModel()
	model.DocumentNumber = p.DocumentNumber
	if p.ID == "" {
		p.ID = bson.NewObjectId()
		dateFormat := time.Now().Format("02012006")
		model.DocumentNumber = "PP/" + dateFormat + "/" + strNum + strconv.Itoa(secPP)
	}
	model.ID = p.ID
	model.DateStr = p.DateStr
	model.DatePosting = p.DatePosting
	model.SupplierCode = p.SupplierCode
	model.SupplierName = p.SupplierName
	model.Department = p.Department
	model.Attachment = fileName
	model.PaymentAccount = p.PaymentAccount
	model.PaymentName = p.PaymentName
	model.ListDetail = p.ListDetail
	model.IsInventory = p.IsInventory
	// model.PICMV = p.PICMV
	model.User = k.Session("username").(string)
	totalBalanceAll := 0.0
	if p.ListDetail[0].Id == "" {
		for key, _ := range p.ListDetail {
			idList := model.DocumentNumber + "/" + strconv.Itoa(key)
			p.ListDetail[key].Id = idList
			p.ListDetail[key].AlreadyPaid += p.ListDetail[key].Payment
			p.ListDetail[key].Balance = p.ListDetail[key].Amount - p.ListDetail[key].AlreadyPaid
			totalBalanceAll += (p.ListDetail[key].Amount - p.ListDetail[key].AlreadyPaid)
		}
	}
	model.BalanceAll = totalBalanceAll
	model.ListDetail = p.ListDetail
	e = c.Ctx.Save(model)
	if e != nil {
		return c.SetResultInfo(true, "ERROR", nil)
	}
	c.SavePPtoJournal(p.ListDetail, department, k.Session("username").(string), p.PaymentAccount, p.PaymentName, p.DocumentNumber, p.DatePosting)
	c.SavePPtoPO(p.ListDetail, k.Session("username").(string), p.DocumentNumber, p.DatePosting, model.DocumentNumber, typepurchase)
	c.LogActivity("Purchase Payment", "Insert Purchase Payment", p.DocumentNumber, k)
	return c.SetResultOK(nil)

}
func (c *TransactionController) SavePPtoJournal(ListDetail []DetailPurchasePayment, Department string, User string, accCode int, accName string, DocNumber string, DatePosting time.Time) interface{} {
	m := DatePosting.UTC().Month()
	y := DatePosting.UTC().Year()
	codejurnal := tk.Sprintf("%02d%d", m, y)
	ids, _ := c.GetNextIdSeq("Journal", "", int(m), y)
	number := tk.Sprintf("%04d", ids)
	mdl := new(MainJournal)
	mdl.ID = tk.RandomString(32)
	mdl.IdJournal = "JUR/" + codejurnal + "/" + number
	mdl.PostingDate = DatePosting
	mdl.CreateDate = time.Now()
	mdl.DateStr = DatePosting.Format("02 Jan 2006")
	mdl.Journal_Type = "CashOut"
	mdl.Department = Department
	mdl.Status = "posting"
	mdl.User = User
	dataListDetail := []Journal{}
	totalForCredit := 0.0
	idx, _ := c.GetNextIdSeq("DocumentNumber", mdl.Journal_Type, int(m), y)
	numberDOC := tk.Sprintf("%04d", idx)
	headDOC := "BKK/" + DatePosting.Format("020106") + "/"
	docNumberJournal := headDOC + numberDOC

	thisSalesCode := ""
	thisSalesName := ""
	for i, each := range ListDetail {
		if each.Pay == true {
			resultPO := c.GetPOBasedOnDocNum(each.PoNumber)
			list := Journal{}
			list.Id = tk.RandomString(32)
			list.No = i + 1
			list.PostingDate = mdl.PostingDate
			list.DateStr = mdl.DateStr
			list.Journal_Type = mdl.Journal_Type
			list.Debet = each.Payment
			list.User = User
			list.DocumentNumber = docNumberJournal
			list.Acc_Code = 3110
			list.Acc_Name = "HUTANG DAGANG"
			// if PICMV {
			// 	list.Acc_Code = 1210
			// 	list.Acc_Name = "PIUTANG DAGANG"
			// }
			list.Description = each.PoNumber
			list.Department = Department
			list.SalesCode = resultPO[0].SalesCode
			list.SalesName = resultPO[0].SalesName
			totalForCredit += each.Payment
			dataListDetail = append(dataListDetail, list)

			if i == 0 {
				thisSalesCode = resultPO[0].SalesCode
				thisSalesName = resultPO[0].SalesName
			}
		}
	}
	list2 := Journal{}
	list2.Id = tk.RandomString(32)
	list2.No = len(dataListDetail) + 1
	list2.PostingDate = mdl.PostingDate
	list2.DateStr = mdl.DateStr
	list2.Journal_Type = mdl.Journal_Type
	list2.DocumentNumber = docNumberJournal
	list2.Credit = totalForCredit
	list2.User = User
	list2.Acc_Code = accCode
	list2.Acc_Name = accName
	list2.Description = DocNumber
	list2.Department = Department
	list2.SalesCode = thisSalesCode
	list2.SalesName = thisSalesName
	dataListDetail = append(dataListDetail, list2)
	mdl.ListDetail = dataListDetail
	e := c.Ctx.Save(mdl)
	if e != nil {
		tk.Println(e.Error())
	}
	c.SavePPtoGeneralLedger(ListDetail, Department, User, accCode, accName, DocNumber, mdl.IdJournal, docNumberJournal, DatePosting)
	return ""
}
func (c *TransactionController) SavePPtoGeneralLedger(ListDetail []DetailPurchasePayment, Department string, User string, accCode int, accName string, DocNumber string, idJournal string, docNumberJournal string, DatePosting time.Time) interface{} {
	m := DatePosting.UTC().Month()
	y := DatePosting.UTC().Year()
	mdl := new(MainGeneralLedger)
	mdl.ID = tk.RandomString(32)
	mdl.IdJournal = idJournal
	mdl.PostingDate = DatePosting
	mdl.CreateDate = time.Now()
	mdl.DateStr = DatePosting.Format("02 Jan 2006")
	mdl.Journal_Type = "CashOut"
	if int(mdl.CreateDate.Month()) <= int(mdl.PostingDate.Month()) && mdl.CreateDate.Year() == mdl.PostingDate.Year() {
		mdl.Status = "posting"
	} else {
		mdl.Status = "close"
	}
	mdl.User = User
	mdl.Department = Department
	dataListDetail := []GeneralDetail{}
	totalForCredit := 0.0
	idx, _ := c.GetNextIdSeq("DocumentNumberGL", mdl.Journal_Type, int(m), y)
	numberDOC := tk.Sprintf("%04d", idx)
	headDOC := "BKK/" + DatePosting.Format("020106") + "/"
	docNumberGL := headDOC + numberDOC

	thisSalesCode := ""
	thisSalesName := ""
	for i, each := range ListDetail {
		if each.Pay == true {
			resultPO := c.GetPOBasedOnDocNum(each.PoNumber)
			list := GeneralDetail{}
			list.Id = tk.RandomString(32)
			list.No = i + 1
			list.PostingDate = mdl.PostingDate
			list.DateStr = mdl.DateStr
			list.Journal_Type = mdl.Journal_Type
			list.Debet = each.Payment
			list.User = User
			list.DocumentNumber = docNumberGL
			list.Acc_Code = 3110
			list.Acc_Name = "HUTANG DAGANG"
			// if PICMV {
			// 	list.Acc_Code = 1210
			// 	list.Acc_Name = "PIUTANG DAGANG"
			// }
			list.Description = each.PoNumber
			list.Department = Department
			list.SalesCode = resultPO[0].SalesCode
			list.SalesName = resultPO[0].SalesName
			totalForCredit += each.Payment
			dataListDetail = append(dataListDetail, list)

			if i == 0 {
				thisSalesCode = resultPO[0].SalesCode
				thisSalesName = resultPO[0].SalesName
			}
		}
	}
	list2 := GeneralDetail{}
	list2.Id = tk.RandomString(32)
	list2.No = len(dataListDetail) + 1
	list2.PostingDate = mdl.PostingDate
	list2.DateStr = mdl.DateStr
	list2.Journal_Type = mdl.Journal_Type
	list2.DocumentNumber = docNumberGL
	list2.Credit = totalForCredit
	list2.User = User
	list2.Acc_Code = accCode
	list2.Department = Department
	list2.SalesCode = thisSalesCode
	list2.SalesName = thisSalesName
	list2.Acc_Name = accName
	list2.Description = DocNumber
	dataListDetail = append(dataListDetail, list2)
	mdl.ListDetail = dataListDetail
	e := c.Ctx.Save(mdl)
	if e != nil {
		tk.Println(e.Error())
	}
	return ""
}

func (c *TransactionController) SavePPtoPO(ListDetail []DetailPurchasePayment, User string, DocNumber string, DatePost time.Time, docNoPP string, typepurchase string) interface{} {
	tableName := NewPurchaseOrder().TableName()
	if typepurchase == "Inventory" {
		tableName = NewPurchaseInventory().TableName()
	}
	for _, each := range ListDetail {
		if each.Pay == true {
			var pipes []tk.M
			pipes = append(pipes, tk.M{"$match": tk.M{"DocumentNumber": each.PoNumber}})
			csr, e := c.Ctx.Connection.NewQuery().Command("pipe", pipes).From(tableName).Cursor(nil)
			if e != nil {
				return c.SetResultInfo(true, e.Error(), nil)
			}
			defer csr.Close()

			if typepurchase == "Inventory" {
				result := DetailPaymentsInv{}
				DataArr := []PurchaseInventory{}
				err := csr.Fetch(&DataArr, 0, false)
				if err != nil {
					return err.Error()
				}
				csr.Close()
				temp := []DetailPaymentsInv{}
				if len(DataArr) > 0 {
					if len(DataArr[0].ListPayment) > 0 {
						for _, ea := range DataArr[0].ListPayment {
							res := DetailPaymentsInv{}
							res.Id = ea.Id
							res.DatePayment = ea.DatePayment
							res.DocumentPayment = ea.DocumentPayment
							res.PaymentAmount = ea.PaymentAmount
							temp = append(temp, res)
						}
					}
					result.Id = bson.NewObjectId()
					result.DatePayment = DatePost
					result.DocumentPayment = each.PoNumber
					result.PaymentAmount = each.Payment
					temp = append(temp, result)
					DataArr[0].ListPayment = temp
					DataArr[0].AlreadyPaid = each.AlreadyPaid
					if each.Balance == 0 {
						DataArr[0].Status = "PAID"
					}
					erro := c.Ctx.Save(&DataArr[0])
					if erro != nil {
						return c.SetResultInfo(true, "ERROR", nil)
					}
				}
				history := HistoryTrackPurchaseInventory{}
				history.Id = bson.NewObjectId()
				history.DocumentNumber = each.PoNumber
				history.DateCreated = time.Now()
				history.DateStr = DatePost.Format("02-Jan-2006")
				history.DatePP = DatePost
				history.Status = "PP Pending"
				if each.Balance == 0 {
					history.Status = "PP Paid"
				}
				history.DocumentNumberPP = docNoPP
				history.Remark = DataArr[0].Remark
				history.SupplierCode = DataArr[0].SupplierCode
				history.SupplierName = DataArr[0].SupplierName
				crs, e := c.Ctx.Connection.NewQuery().Select().Where(dbox.Eq("DocumentNumber", each.PoNumber)).From("TrackingPurchaseInventory").Cursor(nil)
				defer crs.Close()

				resultPO := []TrackPurchaseInventoryModel{}
				e = crs.Fetch(&resultPO, 0, false)
				if e != nil {
					return c.SetResultInfo(true, e.Error(), nil)
				}
				mod := resultPO[0]
				po := NewTrackPurchaseInventoryModel()
				po.ID = mod.ID
				po.DocumentNumber = mod.DocumentNumber
				po.DateCreated = mod.DateCreated
				po.DateStr = mod.DateStr
				po.DatePO = mod.DatePO
				po.DatePI = mod.DatePI
				po.DatePP = DatePost
				po.Status = "PP Pending"
				if each.Balance == 0 {
					po.Status = "PP Paid"
				}
				po.Remark = mod.Remark
				po.SupplierCode = mod.SupplierCode
				po.SupplierName = mod.SupplierName
				history.DatePO = mod.DatePO
				history.DatePI = mod.DatePI
				po.History = mod.History
				po.History = append(po.History, history)
				e = c.Ctx.Save(po)
				if e != nil {
					return c.SetResultInfo(true, e.Error(), nil)
				}
			} else {
				result := DetailPayments{}
				DataArr := []PurchaseOrder{}
				err := csr.Fetch(&DataArr, 0, false)
				if err != nil {
					return err.Error()
				}
				csr.Close()
				temp := []DetailPayments{}
				if len(DataArr) > 0 {
					if len(DataArr[0].ListPayment) > 0 {
						for _, ea := range DataArr[0].ListPayment {
							res := DetailPayments{}
							res.Id = ea.Id
							res.DatePayment = ea.DatePayment
							res.DocumentPayment = ea.DocumentPayment
							res.PaymentAmount = ea.PaymentAmount
							temp = append(temp, res)
						}
					}
					result.Id = bson.NewObjectId()
					result.DatePayment = DatePost
					result.DocumentPayment = each.PoNumber
					result.PaymentAmount = each.Payment
					temp = append(temp, result)
					DataArr[0].ListPayment = temp
					DataArr[0].AlreadyPaid = each.AlreadyPaid
					if each.Balance == 0 {
						DataArr[0].Status = "PAID"
					}
					erro := c.Ctx.Save(&DataArr[0])
					if erro != nil {
						return c.SetResultInfo(true, "ERROR", nil)
					}
				}
				history := HistoryTrackPurchase{}
				history.Id = bson.NewObjectId()
				history.DocumentNumber = each.PoNumber
				history.DateCreated = time.Now()
				history.DateStr = DatePost.Format("02-Jan-2006")
				history.DatePP = DatePost
				history.Status = "PP Pending"
				if each.Balance == 0 {
					history.Status = "PP Paid"
				}
				history.DocumentNumberPP = docNoPP
				// tk.Println("cok", DataArr[0].Remark)
				history.Remark = DataArr[0].Remark
				history.SupplierCode = DataArr[0].SupplierCode
				history.SupplierName = DataArr[0].SupplierName
				crs, e := c.Ctx.Connection.NewQuery().Select().Where(dbox.Eq("DocumentNumber", each.PoNumber)).From("TrackingPurchase").Cursor(nil)
				defer crs.Close()

				resultPO := []TrackPurchaseModel{}
				e = crs.Fetch(&resultPO, 0, false)
				if e != nil {
					return c.SetResultInfo(true, e.Error(), nil)
				}
				mod := resultPO[0]
				po := NewTrackPurchaseModel()
				po.ID = mod.ID
				po.DocumentNumber = mod.DocumentNumber
				po.DateCreated = mod.DateCreated
				po.DateStr = mod.DateStr
				po.DatePO = mod.DatePO
				po.DatePI = mod.DatePI
				po.DatePP = DatePost
				po.Status = "PP Pending"
				if each.Balance == 0 {
					po.Status = "PP Paid"
				}
				po.Remark = mod.Remark
				po.SupplierCode = mod.SupplierCode
				po.SupplierName = mod.SupplierName
				history.DatePO = mod.DatePO
				history.DatePI = mod.DatePI
				po.History = mod.History
				po.History = append(po.History, history)
				e = c.Ctx.Save(po)
				if e != nil {
					return c.SetResultInfo(true, e.Error(), nil)
				}
			}

		}
	}

	return c.SetResultOK(nil)
}

func (c *TransactionController) ExportToPdfPurchasePayment(k *knot.WebContext) interface{} {

	k.Config.OutputType = knot.OutputJson
	p := struct {
		Data PurchasePaymentModel
	}{}
	e := k.GetPayload(&p)
	if e != nil {
		c.WriteLog(e)
	}

	// csr, e := c.Ctx.Connection.NewQuery().Select().From("PurchasePayment").Where(dbox.Eq("_id", bson.ObjectIdHex("59b270aac544753538c538a0"))).Cursor(nil)
	// if e != nil {
	// 	tk.Println("query", e.Error())
	// }
	// defer csr.Close()
	results := p.Data
	// e = csr.Fetch(&results, 0, false)
	// if e != nil {
	// 	tk.Println("fetch", e.Error())
	// }
	DATA := results
	// tk.Println(DATA)
	corp, e := helpers.GetDataCorporateJson()
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}
	pdf := gofpdf.New("L", "mm", "A4", c.FontPath)
	pdf.AddFont("Century_Gothic", "", "Century_Gothic.json")
	pdf.AddFont("Century_Gothicb", "B", "Century_Gothicb.json")
	PurchasePaymentHeadTable := []string{"No", "Date", "Purchase Number", "Amount", "Paid", "Payment", "Balance", "Status"}
	pdf.AddPage()
	pdf.SetXY(8, 5)

	pdf.SetFont("Century_Gothic", "", 12)
	// pdf.Image(c.LogoFile+"eaciit-logo.png", 10, 10, 17, 17, false, "", 0, "")
	pdf.Ln(2)
	y1 := pdf.GetY()
	pdf.SetY(y1 + 4)
	pdf.SetX(11)
	pdf.CellFormat(0, 12, corp.Name, "", 0, "L", false, 0, "")
	pdf.SetY(y1 + 10)
	pdf.SetX(11)
	pdf.SetFont("Century_Gothic", "", 11)
	pdf.CellFormat(0, 15, corp.Address, "", 0, "L", false, 0, "")
	pdf.SetX(180)
	pdf.SetFont("Century_Gothicb", "B", 16)
	pdf.CellFormat(0, 15, "PURCHASE PAYMENT", "", 0, "L", false, 0, "")

	pdf.SetY(y1 + 17)
	pdf.SetX(11)
	pdf.SetFont("Century_Gothic", "", 11)
	pdf.CellFormat(0, 12, corp.City+"-"+corp.Country, "", 0, "L", false, 0, "")
	pdf.SetX(10)
	pdf.Ln(1)

	pdf.SetY(y1 + 23)
	pdf.SetX(11)
	pdf.SetFont("Century_Gothic", "", 11)
	pdf.CellFormat(0, 12, corp.NoTelp, "", 0, "L", false, 0, "")
	pdf.SetX(10)

	pdf.Line(pdf.GetX(), pdf.GetY()+9, 286, pdf.GetY()+9)      //garis horizontal1
	pdf.Line(pdf.GetX(), pdf.GetY()+25, 286, pdf.GetY()+25)    //garis horizontal2
	pdf.Line(pdf.GetX()+138, pdf.GetY()+9, pdf.GetX()+138, 55) // garis vertikal 2 tengah
	// pdf.Line(pdf.GetX(), pdf.GetY()+9, pdf.GetX(), 80) // garis vertikal 1 dari kiri/156 -> 136
	y00 := pdf.GetY() + 9
	y2 := pdf.GetY()
	pdf.SetX(9)
	pdf.SetY(y2 + 10)
	pdf.MultiCell(12, 5, " To : ", "", "L", false)

	pdf.SetY(y2 + 10)
	pdf.SetX(19)
	pdf.MultiCell(130, 5, DATA.SupplierName, "", "L", false)

	pdf.SetY(y2 + 26)
	pdf.SetX(10)
	pdf.MultiCell(138.5, 5, " Payment :", "", "L", false)

	// //TABLE KANAN
	pdf.SetY(y2 + 10)
	pdf.SetX(147.5)
	pdf.MultiCell(27, 5, " Payment No", "", "L", false)
	pdf.SetY(y2 + 10)
	pdf.SetX(171.5)
	pdf.MultiCell(4, 5, ":", "", "L", false)
	pdf.SetY(y2 + 10)
	pdf.SetX(173.5)
	pdf.MultiCell(90, 5, DATA.DocumentNumber, "", "L", false)
	pdf.SetY(pdf.GetY())

	pdf.SetY(y2 + 15)
	pdf.SetX(147.5)
	pdf.MultiCell(138.5, 5, " Date", "", "L", false)
	pdf.SetY(pdf.GetY())
	pdf.SetY(y2 + 15)
	pdf.SetX(171.5)
	pdf.MultiCell(4, 5, ":", "", "L", false)
	pdf.SetY(y2 + 15)
	pdf.SetX(173.5)
	pdf.MultiCell(90, 5, DATA.DateStr, "", "L", false)
	pdf.SetY(pdf.GetY())
	// csr, e := c.Ctx.Connection.NewQuery().Select().From("Coa").Where(dbox.Eq("main_acc_code", 1100)).Cursor(nil)
	// defer csr.Close()
	// if e != nil {
	// 	return c.SetResultInfo(true, e.Error(), nil)
	// }
	// coadata := []CoaModel{}
	// e = csr.Fetch(&coadata, 0, false)
	// if e != nil {
	// 	return c.SetResultInfo(true, e.Error(), nil)
	// }
	// pdf.SetX(13.0)
	// x0 := 10.0
	// pdf.SetY(y2 + 31)
	// for i, each := range coadata {
	// 	if i == 0 {
	// 		pdf.SetX(13.0)
	// 	}
	// 	if i > 0 && i%4 == 0 {
	// 		pdf.Ln(8.0)
	// 		pdf.SetX(13.0)
	// 	}
	// 	filled := false
	// 	if DATA.PaymentAccount == each.ACC_Code {
	// 		filled = true
	// 	}
	// 	pdf.CellFormat(4.5, 5, "", "1", 0, "L", filled, 0, "")
	// 	pdf.CellFormat(50.0, 5, each.Account_Name, "", 0, "L", false, 0, "")
	// }
	x0 := 10.0
	pdf.SetY(y2 + 31)
	pdf.SetX(13.0)
	pdf.CellFormat(4.5, 5, "", "1", 0, "L", true, 0, "")
	pdf.CellFormat(50.0, 5, DATA.PaymentName, "", 0, "L", false, 0, "")
	pdf.Ln(8.0)

	y0 := pdf.GetY()
	widthHead := []float64{10.0, 26.0, 39.0, 45.0, 45.0, 45.0, 44.0, 22.0}
	for i, head := range PurchasePaymentHeadTable {
		pdf.SetY(y0)
		x := 10.0
		for y, z := range widthHead {
			if i > y {
				x += z
			} else {
				x += 0.0
			}
		}
		pdf.SetX(x)
		if i == 0 {
			pdf.MultiCell(widthHead[i], 7, head, "LBRT", "C", false)
		} else {
			pdf.MultiCell(widthHead[i], 7, head, "BRT", "C", false)
		}

	}
	pdf.SetFont("Century_Gothic", "", 9)
	y3 := pdf.GetY()
	for i, list := range DATA.ListDetail {

		y3 = pdf.GetY()
		pdf.SetY(y3)
		x := 10.0
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		number := i + 1
		numberstr := strconv.Itoa(number)
		pdf.MultiCell(widthHead[0], 5, numberstr, "", "C", false)

		a0 := pdf.GetY()
		pdf.SetY(y3)
		x += widthHead[0]
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		pdf.MultiCell(widthHead[1], 5, list.DatePayment.Local().Format("02 Jan 2006"), "", "L", false)

		a1 := pdf.GetY()
		pdf.SetY(y3)
		x = 10.0 + widthHead[0] + widthHead[1]
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		pdf.MultiCell(widthHead[2], 5, list.PoNumber, "", "L", false)

		a2 := pdf.GetY()
		pdf.SetY(y3)

		x = 10 + widthHead[0] + widthHead[1] + widthHead[2]
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		amount := tk.Sprintf("%.2f", list.Amount)
		amount = c.ConvertToCurrency(amount)
		pdf.MultiCell(widthHead[3], 5, amount, "", "R", false)

		a3 := pdf.GetY()
		pdf.SetY(y3)
		x = 10.0 + widthHead[0] + widthHead[1] + widthHead[2] + widthHead[3]
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		// alreadypaid := tk.Sprintf("%.2f", list.AlreadyPaid)
		// alreadypaid = c.ConvertToCurrency(alreadypaid)
		pdf.MultiCell(widthHead[4], 5, "0", "", "R", false)
		// pdf.MultiCell(w, h, txtStr, borderStr, alignStr, fill)

		a4 := pdf.GetY()
		pdf.SetY(y3)
		x = 10.0 + widthHead[0] + widthHead[1] + widthHead[2] + widthHead[3] + widthHead[4]
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		payment := tk.Sprintf("%.2f", list.Payment)
		payment = c.ConvertToCurrency(payment)
		pdf.MultiCell(widthHead[5], 5, payment, "", "R", false)

		a5 := pdf.GetY()
		pdf.SetY(y3)
		x = 10.0 + widthHead[0] + widthHead[1] + widthHead[2] + widthHead[3] + widthHead[4] + widthHead[5]
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		balance := tk.Sprintf("%.2f", list.Balance)
		balance = c.ConvertToCurrency(balance)
		pdf.MultiCell(widthHead[6], 5, balance, "", "R", false)

		a6 := pdf.GetY()
		pdf.SetY(y3)
		x = 10.0 + widthHead[0] + widthHead[1] + widthHead[2] + widthHead[3] + widthHead[4] + widthHead[5] + widthHead[6]
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		if list.Pay {

			pdf.MultiCell(widthHead[7], 5, "Paid", "", "L", false)
		}

		a7 := pdf.GetY()
		pdf.SetY(y3)

		allA := []float64{a0, a1, a2, a3, a4, a5, a6, a7}

		var n, biggest float64
		for _, v := range allA {
			if v > n {
				n = v
				biggest = n
			}
		}
		pdf.SetY(biggest)
	}

	y4 := pdf.GetY()
	pdf.Line(x0, y00, x0, y4)                                                                                                                                                                                                                     // garis vertikal 1 dari kiri/156 -> 136
	pdf.Line(10.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6]+widthHead[7], y00, 10.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6]+widthHead[7], y4) // garis vertikal 3 paling kanan
	// pdf.Line(pdf.GetX()-236, y4, 286, y4) //HORIZOTAL
	pdf.Line(pdf.GetX()-254, y4, 286, y4)

	e = os.RemoveAll(c.PdfPath + "/purchasepayment")
	if e != nil {
		return c.SetResultInfo(true, e.Error(), "")
	}
	e = os.MkdirAll(c.PdfPath+"/purchasepayment", 0777)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), "")
	}

	namepdf := "-purchasepayment.pdf"
	FixName := time.Now().Format("2006-01-02T150405") + namepdf
	fileName := FixName
	location := c.PdfPath + "/purchasepayment"
	e = pdf.OutputFileAndClose(location + "/" + fileName)
	// tk.Println(e)
	if e != nil {
		// e.Error()
		return c.SetResultInfo(true, e.Error(), "")
	}
	return fileName
}
func (c *TransactionController) ExportToPdfListPurchasePayment(k *knot.WebContext) interface{} {

	k.Config.OutputType = knot.OutputJson
	p := struct {
		// Data PurchasePaymentModel
		Id bson.ObjectId
	}{}
	e := k.GetPayload(&p)
	if e != nil {
		c.WriteLog(e)
	}

	csr, e := c.Ctx.Connection.NewQuery().Select().From("PurchasePayment").Where(dbox.Eq("_id", p.Id)).Cursor(nil)
	if e != nil {
		tk.Println("query", e.Error())
	}
	defer csr.Close()
	results := []PurchasePaymentModel{}
	e = csr.Fetch(&results, 0, false)
	if e != nil {
		tk.Println("fetch", e.Error())
	}
	DATA := results[0]
	// tk.Println(DATA)
	corp, e := helpers.GetDataCorporateJson()
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}
	pdf := gofpdf.New("L", "mm", "A4", c.FontPath)
	pdf.AddFont("Century_Gothic", "", "Century_Gothic.json")
	pdf.AddFont("Century_Gothicb", "B", "Century_Gothicb.json")
	PurchasePaymentHeadTable := []string{"No", "Date", "Purchase Number", "Amount", "Paid", "Payment", "Balance", "Status"}
	pdf.AddPage()
	pdf.SetXY(8, 5)

	pdf.SetFont("Century_Gothic", "", 12)
	// pdf.Image(c.LogoFile+"eaciit-logo.png", 10, 10, 17, 17, false, "", 0, "")
	pdf.Ln(2)
	y1 := pdf.GetY()
	pdf.SetY(y1 + 4)
	pdf.SetX(11)
	pdf.CellFormat(0, 12, corp.Name, "", 0, "L", false, 0, "")
	pdf.SetY(y1 + 10)
	pdf.SetX(11)
	pdf.SetFont("Century_Gothic", "", 11)
	pdf.CellFormat(0, 15, corp.Address, "", 0, "L", false, 0, "")
	pdf.SetX(180)
	pdf.SetFont("Century_Gothicb", "B", 16)
	pdf.CellFormat(0, 15, "PURCHASE PAYMENT", "", 0, "L", false, 0, "")

	pdf.SetY(y1 + 17)
	pdf.SetX(11)
	pdf.SetFont("Century_Gothic", "", 11)
	pdf.CellFormat(0, 12, corp.City+"-"+corp.Country, "", 0, "L", false, 0, "")
	pdf.SetX(10)
	pdf.Ln(1)

	pdf.SetY(y1 + 23)
	pdf.SetX(11)
	pdf.SetFont("Century_Gothic", "", 11)
	pdf.CellFormat(0, 12, corp.NoTelp, "", 0, "L", false, 0, "")
	pdf.SetX(10)

	pdf.Line(pdf.GetX(), pdf.GetY()+9, 286, pdf.GetY()+9)      //garis horizontal1
	pdf.Line(pdf.GetX(), pdf.GetY()+25, 286, pdf.GetY()+25)    //garis horizontal2
	pdf.Line(pdf.GetX()+138, pdf.GetY()+9, pdf.GetX()+138, 55) // garis vertikal 2 tengah
	y00 := pdf.GetY() + 9
	y2 := pdf.GetY()
	pdf.SetX(9)
	pdf.SetY(y2 + 10)
	pdf.MultiCell(12, 5, " To : ", "", "L", false)

	pdf.SetY(y2 + 10)
	pdf.SetX(19)
	pdf.MultiCell(130, 5, DATA.SupplierName, "", "L", false)

	pdf.SetY(y2 + 26)
	pdf.SetX(10)
	pdf.MultiCell(138.5, 5, " Payment :", "", "L", false)

	// //TABLE KANAN
	pdf.SetY(y2 + 10)
	pdf.SetX(147.5)
	pdf.MultiCell(27, 5, " Payment No", "", "L", false)
	pdf.SetY(y2 + 10)
	pdf.SetX(171.5)
	pdf.MultiCell(4, 5, ":", "", "L", false)
	pdf.SetY(y2 + 10)
	pdf.SetX(173.5)
	pdf.MultiCell(90, 5, DATA.DocumentNumber, "", "L", false)
	pdf.SetY(pdf.GetY())

	pdf.SetY(y2 + 15)
	pdf.SetX(147.5)
	pdf.MultiCell(138.5, 5, " Date", "", "L", false)
	pdf.SetY(pdf.GetY())
	pdf.SetY(y2 + 15)
	pdf.SetX(171.5)
	pdf.MultiCell(4, 5, ":", "", "L", false)
	pdf.SetY(y2 + 15)
	pdf.SetX(173.5)
	pdf.MultiCell(90, 5, DATA.DateStr, "", "L", false)
	pdf.SetY(pdf.GetY())
	// csr, e = c.Ctx.Connection.NewQuery().Select().From("Coa").Where(dbox.Eq("main_acc_code", 1100)).Cursor(nil)
	// defer csr.Close()
	// if e != nil {
	// 	return c.SetResultInfo(true, e.Error(), nil)
	// }
	// coadata := []CoaModel{}
	// e = csr.Fetch(&coadata, 0, false)
	// if e != nil {
	// 	return c.SetResultInfo(true, e.Error(), nil)
	// }
	// pdf.SetX(13.0)
	// x0 := 10.0
	// pdf.SetY(y2 + 31)
	// for i, each := range coadata {
	// 	if i == 0 {
	// 		pdf.SetX(13.0)
	// 	}
	// 	if i > 0 && i%4 == 0 {
	// 		pdf.Ln(8.0)
	// 		pdf.SetX(13.0)
	// 	}
	// 	filled := false
	// 	if DATA.PaymentAccount == each.ACC_Code {
	// 		filled = true
	// 	}
	// 	pdf.CellFormat(4.5, 5, "", "1", 0, "L", filled, 0, "")
	// 	pdf.CellFormat(50.0, 5, each.Account_Name, "", 0, "L", false, 0, "")
	// }
	x0 := 10.0
	pdf.SetY(y2 + 31)
	pdf.SetX(13.0)
	pdf.CellFormat(4.5, 5, "", "1", 0, "L", true, 0, "")
	pdf.CellFormat(50.0, 5, DATA.PaymentName, "", 0, "L", false, 0, "")
	pdf.Ln(8.0)

	y0 := pdf.GetY()
	widthHead := []float64{10.0, 26.0, 39.0, 45.0, 45.0, 45.0, 44.0, 22.0}
	for i, head := range PurchasePaymentHeadTable {
		pdf.SetY(y0)
		x := 10.0
		for y, z := range widthHead {
			if i > y {
				x += z
			} else {
				x += 0.0
			}
		}
		pdf.SetX(x)
		if i == 0 {
			pdf.MultiCell(widthHead[i], 7, head, "LBRT", "C", false)
		} else {
			pdf.MultiCell(widthHead[i], 7, head, "BRT", "C", false)
		}

	}
	pdf.SetFont("Century_Gothic", "", 9)
	y3 := pdf.GetY()
	for i, list := range DATA.ListDetail {

		y3 = pdf.GetY()
		pdf.SetY(y3)
		x := 10.0
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		number := i + 1
		numberstr := strconv.Itoa(number)
		pdf.MultiCell(widthHead[0], 5, numberstr, "", "C", false)

		a0 := pdf.GetY()
		pdf.SetY(y3)
		x += widthHead[0]
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		pdf.MultiCell(widthHead[1], 5, list.DatePayment.Local().Format("02 Jan 2006"), "", "L", false)

		a1 := pdf.GetY()
		pdf.SetY(y3)
		x = 10.0 + widthHead[0] + widthHead[1]
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		pdf.MultiCell(widthHead[2], 5, list.PoNumber, "", "L", false)

		a2 := pdf.GetY()
		pdf.SetY(y3)

		x = 10 + widthHead[0] + widthHead[1] + widthHead[2]
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		amount := tk.Sprintf("%.2f", list.Amount)
		amount = c.ConvertToCurrency(amount)
		pdf.MultiCell(widthHead[3], 5, amount, "", "R", false)

		a3 := pdf.GetY()
		pdf.SetY(y3)
		x = 10.0 + widthHead[0] + widthHead[1] + widthHead[2] + widthHead[3]
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		// alreadypaid := tk.Sprintf("%.2f", list.AlreadyPaid)
		// alreadypaid = c.ConvertToCurrency(alreadypaid)
		pdf.MultiCell(widthHead[4], 5, "0", "", "R", false)
		// pdf.MultiCell(w, h, txtStr, borderStr, alignStr, fill)

		a4 := pdf.GetY()
		pdf.SetY(y3)
		x = 10.0 + widthHead[0] + widthHead[1] + widthHead[2] + widthHead[3] + widthHead[4]
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		payment := tk.Sprintf("%.2f", list.Payment)
		payment = c.ConvertToCurrency(payment)
		pdf.MultiCell(widthHead[5], 5, payment, "", "R", false)

		a5 := pdf.GetY()
		pdf.SetY(y3)
		x = 10.0 + widthHead[0] + widthHead[1] + widthHead[2] + widthHead[3] + widthHead[4] + widthHead[5]
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		balance := tk.Sprintf("%.2f", list.Balance)
		balance = c.ConvertToCurrency(balance)
		pdf.MultiCell(widthHead[6], 5, balance, "", "R", false)

		a6 := pdf.GetY()
		pdf.SetY(y3)
		x = 10.0 + widthHead[0] + widthHead[1] + widthHead[2] + widthHead[3] + widthHead[4] + widthHead[5] + widthHead[6]
		pdf.SetLeftMargin(x)
		pdf.SetX(x)
		if list.Pay {

			pdf.MultiCell(widthHead[7], 5, "Paid", "", "L", false)
		}

		a7 := pdf.GetY()
		pdf.SetY(y3)

		allA := []float64{a0, a1, a2, a3, a4, a5, a6, a7}

		var n, biggest float64
		for _, v := range allA {
			if v > n {
				n = v
				biggest = n
			}
		}
		pdf.SetY(biggest)
	}

	y4 := pdf.GetY()
	pdf.Line(x0, y00, x0, y4)                                                                                                                                                                                                                     // garis vertikal 1 dari kiri/156 -> 136
	pdf.Line(10.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6]+widthHead[7], y00, 10.0+widthHead[0]+widthHead[1]+widthHead[2]+widthHead[3]+widthHead[4]+widthHead[5]+widthHead[6]+widthHead[7], y4) // garis vertikal 3 paling kanan
	// pdf.Line(pdf.GetX()-236, y4, 286, y4) //HORIZOTAL
	pdf.Line(pdf.GetX()-254, y4, 286, y4)

	e = os.RemoveAll(c.PdfPath + "/purchasepayment")
	if e != nil {
		return c.SetResultInfo(true, e.Error(), "")
	}
	e = os.MkdirAll(c.PdfPath+"/purchasepayment", 0777)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), "")
	}
	namepdf := "-purchasepayment.pdf"
	FixName := time.Now().Format("2006-01-02T150405") + namepdf
	fileName := FixName
	location := c.PdfPath + "/purchasepayment"
	e = pdf.OutputFileAndClose(location + "/" + fileName)
	// tk.Println(e)
	if e != nil {
		// e.Error()
		return c.SetResultInfo(true, e.Error(), "")
	}
	return fileName
}

//--------------------- For purchase inventory------------------------------//
func (c *TransactionController) GetDataPOInventoryForPP(k *knot.WebContext) interface{} {
	k.Config.OutputType = knot.OutputJson
	p := struct {
		DateStart string
		DateEnd   string
	}{}
	e := k.GetPayload(&p)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}

	var pipes []tk.M
	dateStart, _ := time.Parse("2006-01-02", p.DateStart)
	End, _ := time.Parse("2006-01-02", p.DateEnd)
	dateEnd := End.AddDate(0, 0, 1)

	pipes = append(pipes, tk.M{"$match": tk.M{"DatePosting": tk.M{"$gte": dateStart, "$lt": dateEnd}}})
	pipes = append(pipes, tk.M{"$match": tk.M{"Status": "PI"}})

	csr, e := c.Ctx.Connection.NewQuery().Command("pipe", pipes).From("PurchaseInventory").Cursor(nil)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}
	defer csr.Close()

	results := make([]tk.M, 0)
	e = csr.Fetch(&results, 0, false)
	if e != nil {
		return c.SetResultInfo(true, e.Error(), nil)
	}

	return c.SetResultInfo(false, "Success", results)
}

func (c *TransactionController) GetPOBasedOnDocNum(PONumber string) []PurchaseInventory {
	typeInv := strings.Split(PONumber, "/")[0]
	tableName := ""
	if typeInv == "PO" {
		tableName = "PurchaseOrder"
	} else {
		tableName = "PurchaseInventory"
	}
	crs, _ := c.Ctx.Connection.NewQuery().Select().Where(dbox.Eq("DocumentNumber", PONumber)).From(tableName).Cursor(nil)
	defer crs.Close()
	resultPO := []PurchaseInventory{}
	_ = crs.Fetch(&resultPO, 0, false)
	return resultPO
}
